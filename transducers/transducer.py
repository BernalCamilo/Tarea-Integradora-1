from regex_expressions import regular_expressions

class Transducer:
    def __init__(self):
        self.name = "prueba"

    def transductorMethod(self, username, text):
        
        from pyformlang.fst import FST
        transducer = FST()
        transducer.add_transitions([('q0','a','q1',['x']),
            ('q0','a','q0',['a']),
            ('q0','b','q0',['b']),
            ('q0','c','q0',['c']),
            ('q0','d','q0',['d']),
            ('q0','e','q0',['e']),
            ('q0','f','q0',['f']),
            ('q0','g','q0',['g']),
            ('q0','h','q0',['h']),
            ('q0','i','q0',['i']),
            ('q0','j','q0',['j']),
            ('q0','k','q0',['k']),
            ('q0','l','q0',['l']),
            ('q0','m','q0',['m']),
            ('q0','n','q0',['n']),
            ('q0','ñ','q0',['ñ']),
            ('q0','o','q0',['o']),
            ('q0','p','q0',['p']),
            ('q0','q','q0',['q']),
            ('q0','r','q0',['r']),
            ('q0','s','q0',['s']),
            ('q0','t','q0',['t']),
            ('q0','u','q0',['u']),
            ('q0','v','q0',['v']),
            ('q0','x','q0',['x']),
            ('q0','y','q0',['y']),
            ('q0','z','q0',['z']),

            ('q0','A','q0',['A']),
            ('q0','B','q0',['B']),
            ('q0','C','q0',['C']),
            ('q0','D','q0',['D']),
            ('q0','E','q0',['E']),
            ('q0','F','q0',['F']),
            ('q0','G','q0',['G']),
            ('q0','H','q0',['H']),
            ('q0','I','q0',['I']),
            ('q0','J','q0',['J']),
            ('q0','K','q0',['K']),
            ('q0','L','q0',['L']),
            ('q0','M','q0',['M']),
            ('q0','N','q0',['N']),
            ('q0','O','q0',['O']),
            ('q0','P','q0',['P']),
            ('q0','Q','q0',['Q']),
            ('q0','R','q0',['R']),
            ('q0','S','q0',['S']),
            ('q0','T','q0',['T']),
            ('q0','U','q0',['U']),
            ('q0','V','q0',['V']),
            ('q0','Y','q0',['Y']),
            ('q0','Z','q0',['Z']),
            ('q0','0','q0',['0']),

            ('q0','1','q0',['1']),

            ('q0','2','q0',['2']),

            ('q0','3','q0',['3']),

            ('q0','4','q0',['4']),

            ('q0','5','q0',['5']),

            ('q0','6','q0',['6']),

            ('q0','7','q0',['7']),

            ('q0','8','q0',['8']),

            ('q0','9','q0',['9']),

            ('q0',' ','q0',[' ']),

            ('q0','?','q0',['?']),

            ('q0','¿','q0',['¿']),

            ('q0','!','q0',['!']),

            ('q0','¡','q0',['¡']),

            ('q0','','q0',['']),

            ('q0','.','q0',['.']),

            ('q0',',','q0',[',']),

            ('q0',';','q0',[';']),

            ('q0',':','q0',[':']),

            ('q0','-','q1',['']),

            ('q1','-','q2',['']),

            ('q2','-','q3',['']),

            ('q3','-','q0',[username])
            ])

        transducer.add_start_state('q0')
        transducer.add_final_state('q0')
        ans = "".join(list(transducer.translate(text))[0])
        return ans